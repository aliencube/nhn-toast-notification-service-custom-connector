name: 'Function App Deploy'

on:
  workflow_call:
    inputs:
      job_name:
        type: string
        required: true
      environment:
        type: string
        required: true
      api_name:
        type: string
        required: true
      api_app_name:
        type: string
        required: true
      nv_id:
        type: string
        required: true
      nv_name:
        type: string
        required: true
      location_code:
        type: string
        required: true
      apim_api_name:
        type: string
        required: true
      apim_api_display_name:
        type: string
        required: true
      apim_api_description:
        type: string
        required: true
      apim_api_path:
        type: string
        required: true
      apim_api_subscription_required:
        type: string
        required: true
      apim_api_policy_url:
        type: string
        required: true
    secrets:
      azure_credentials:
        required: true
      resource_group_name:
        required: true
      resource_name:
        required: true
      functionapp_app_settings:
        required: true

jobs:
  build_test_analyse_deploy:
    name: ${{ inputs.job_name }}

    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
    - name: Set environment variables
      shell: bash
      run: |
        echo "RESOURCE_GROUP_NAME=rg-${{ secrets.resource_group_name }}-${{ inputs.environment }}-${{ inputs.location_code }}" >> $GITHUB_ENV
        echo "FUNCTION_APP_PATH=${{ github.workspace }}/src/${{ inputs.api_app_name }}" >> $GITHUB_ENV
        echo "FUNCTION_APP_NAME=fncapp-${{ secrets.resource_name }}-${{ inputs.api_name }}-${{ inputs.environment }}-${{ inputs.location_code }}" >> $GITHUB_ENV
        echo "APIM_NAME=apim-${{ secrets.resource_name }}-${{ inputs.environment }}-${{ inputs.location_code }}" >> $GITHUB_ENV
        echo "RESOURCE_PATH=${{ github.workspace }}/resources" >> $GITHUB_ENV

    # - name: Check environment variables
    #   shell: bash
    #   run: |
    #     echo $RESOURCE_GROUP_NAME
    #     echo $FUNCTION_APP_PATH
    #     echo $FUNCTION_APP_NAME
    #     echo $APIM_NAME
    #     echo $RESOURCE_PATH

    - name: Download FunctionApp artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ inputs.api_app_name }}
        path: ${{ env.FUNCTION_APP_PATH }}

    - name: Download bicep artifact
      uses: actions/download-artifact@v2
      with:
        name: resources
        path: ${{ env.RESOURCE_PATH }}

    - name: Login to Azure
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.azure_credentials }}

    - name: Get FunctionApp publish profile
      id: publishprofile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.azure_credentials }}
      with:
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        appName: ${{ env.FUNCTION_APP_NAME }}

    - name: Deploy FunctionApp
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.FUNCTION_APP_NAME }}
        package: ${{ env.FUNCTION_APP_PATH }}
        publish-profile: ${{ steps.publishprofile.outputs.profile }}

    - name: Reset FunctionApp publish profile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.azure_credentials }}
      with:
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        appName: ${{ env.FUNCTION_APP_NAME }}
        reset: true
    
    - name: Update FunctionApp app settings
      shell: pwsh
      run: |
        $appsettings = az functionapp config appsettings set `
          -g ${{ env.RESOURCE_GROUP_NAME }} `
          -n ${{ env.FUNCTION_APP_NAME }} `
          --settings ${{ secrets.functionapp_app_settings }}

    - name: Update FunctionApp access key in APIM
      shell: pwsh
      run: |
        $functionkey = az functionapp keys list `
          -g ${{ env.RESOURCE_GROUP_NAME }} `
          -n ${{ env.FUNCTION_APP_NAME }} `
          --query "functionKeys.default" -o tsv

        $nv = az apim nv show `
          -g ${{ env.RESOURCE_GROUP_NAME }} `
          -n ${{ env.APIM_NAME }} `
          --named-value-id ${{ inputs.nv_id }}

        if ($nv -eq $null) {
          $nv = az apim nv create `
            -g ${{ env.RESOURCE_GROUP_NAME }} `
            -n ${{ env.APIM_NAME }} `
            --named-value-id ${{ inputs.nv_id }} `
            --display-name ${{ inputs.nv_name }} `
            --secret true `
            --value $functionkey
        } else {
          $nv = az apim nv update `
            -g ${{ env.RESOURCE_GROUP_NAME }} `
            -n ${{ env.APIM_NAME }} `
            --named-value-id ${{ inputs.nv_id }} `
            --secret true `
            --value $functionkey
        }

    - name: Update API in APIM
      shell: pwsh
      run: |
        pushd ${{ env.RESOURCE_PATH }}

        $subscriptionRequired = "${{ inputs.apim_api_subscription_required }}".ToLower() -eq "true" ? $true : $false

        ./Provision-ApiManagementApi.ps1 `
          -ResourceGroupName ${{ env.RESOURCE_GROUP_NAME }} `
          -DeploymentName apim `
          -GroupName ${{ secrets.resource_group_name }} `
          -ResourceName ${{ secrets.resource_name }} `
          -Environment ${{ inputs.environment }} `
          -ApiManagementApiName ${{ inputs.apim_api_name }} `
          -ApiManagementApiDisplayName "${{ inputs.apim_api_display_name }}" `
          -ApiManagementApiDescription "${{ inputs.apim_api_description }}" `
          -ApiManagementApiPath "${{ inputs.apim_api_path }}" `
          -ApiManagementApiSubscriptionRequired $subscriptionRequired `
          -ApiManagementApiFormat openapi+json-link `
          -ApiManagementApiValue https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/openapi/v3.json `
          -ApiManagementApiPolicyFormat rawxml-link `
          -ApiManagementApiPolicyValue ${{ inputs.apim_api_policy_url }}

        popd